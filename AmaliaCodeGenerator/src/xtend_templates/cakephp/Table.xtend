package xtend_templates.cakephp

import main.Project
import structure.domain_model.Entity
import exceptions.ParserException
import structure.domain_model.Attribute
import inflector.Inflector

class Table {
	private var Project project;
	private var Entity entity;

	new(Project project) {
		this.project = project
	}

	def generate(Entity entity) {
		this.entity = entity
		if (project != null && project.domainModel != null && entity != null)
			return template
		else
			throw new ParserException("A domain model must be defined");
	}

	def template() '''
		<?php
		/* Generated by Amalia Code Generator */
		namespace App\Model\Table;
		
		use App\Model\Entity\«entity.name.toLowerCase.toFirstUpper»;
		use Cake\ORM\Query;
		use Cake\ORM\RulesChecker;
		use Cake\ORM\Table;
		use Cake\Validation\Validator;
		
		/**
		 * «Inflector.plural(entity.name.toLowerCase).toFirstUpper» Model
		 *
«««		 * @property \Cake\ORM\Association\BelongsTo $Carros
«««		 * @pro	erty \Cake\ORM\Association\BelongsTo $Clientes
		 */
		class «Inflector.plural(entity.name.toLowerCase).toFirstUpper»Table extends Table
			{
			
			    /**
			     * Initialize method
			     *
			     * @param array $config The configuration for the Table.
			     * @return void
			     */
			    public function initialize(array $config)
			    {
			        parent::initialize($config);
			
			        $this->table('«Inflector.plural(entity.name.toLowerCase)»');
			        $this->displayField('id');
			        $this->primaryKey('id');
			
			        «variables»
			    }
			
			    /**
			     * Default validation rules.
			     *
			     * @param \Cake\Validation\Validator $validator Validator instance.
			     * @return \Cake\Validation\Validator
			     */
			    public function validationDefault(Validator $validator)
			    {
			        $validator
			            ->add('id', 'valid', ['rule' => 'numeric'])
			            ->allowEmpty('id', 'create');
						«requirePresence»
						     return $validator;
						 }
			«buildRules»
		}
	'''

	def buildRules() '''
		«IF entity.hasReferenceAttributes»
			/**
			* Returns a rules checker object that will be used for validating
			* application integrity.
			*
			* @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
			* @return \Cake\ORM\RulesChecker
			*/
			  public function buildRules(RulesChecker $rules)
			  {
			  	«FOR Attribute attr : entity.referencedAttributes»
			  		$rules->add($rules->existsIn(['«attr.name.toLowerCase»_id'], '«Inflector.plural(attr.name.toLowerCase).toFirstUpper»'));
			  	«ENDFOR»			
			  	return $rules;
			  }
		«ENDIF»
	'''

	def variables() '''
		«IF entity.hasReferenceAttributes»
			«FOR Attribute attr : entity.referencedAttributes»
				$this->belongsTo('«Inflector.plural(attr.name.toLowerCase).toFirstUpper»', [
				    'foreignKey' => '«attr.name.toLowerCase»_id',
				    'joinType' => 'INNER'
				]);
			«ENDFOR»
		«ENDIF»
		«IF project.domainModel.whereEntityIsReferenced(entity).size() > 0»
			«FOR Entity e : project.domainModel.whereEntityIsReferenced(entity)»
				$this->hasMany('«Inflector.plural(e.name.toLowerCase).toFirstUpper»', [
				  'foreignKey' => '«entity.name.toLowerCase»_id'
				]);
			«ENDFOR»
		«ENDIF»
	'''

	def requirePresence() '''
		«FOR Attribute attr : entity.attributes»			
			«IF !attr.reference»
				$validator
				«IF attr.type.equalsIgnoreCase("date")»
					->add('«attr.name.toLowerCase»', 'valid', ['rule' => 'date'])
				«ENDIF»
				->requirePresence('«attr.name.toLowerCase»', 'create')
				->notEmpty('«attr.name.toLowerCase.toFirstUpper»');
			«ENDIF»	
		«ENDFOR»
	'''

}